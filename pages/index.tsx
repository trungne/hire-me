import type { NextPage } from "next";
import Head from "next/head";
import { useAtom } from "jotai";
import { useEffect, useState } from "react";
import { useMantineTheme, Tabs, Modal, Text, Button } from "@mantine/core";
import { getAuth, onAuthStateChanged } from "firebase/auth";
import SideBar from "components/SideBar";
import {
  firebaseUserAtom,
  navBarAtom,
  writeAcessTokenAtom,
} from "shared/atoms";
import { NavCategory, NavCategoryValueType, User } from "shared/types";
import { CURRENT_NAV_BAR_LOCAL_STORAGE } from "shared/constants";
import {
  TemplateContent,
  ProfileContent,
  EducationContent,
  WorkContent,
  SkillContent,
  ProjectContent,
  AwardContent,
} from "components/TabContent";
import { Header } from "components/Header";
import { createUser, getAccessToken, getUserByEmail } from "shared/queries";
import { AxiosError } from "axios";

const auth = getAuth();
const Home: NextPage = () => {
  const theme = useMantineTheme();
  const [opened, setOpened] = useState(false);
  const [_, setAccessToken] = useAtom(writeAcessTokenAtom);
  const [firebaseUser, setFirebaseUser] = useAtom(firebaseUserAtom);
  const [modalOpened, setModalOpened] = useState(false);

  const [navBar, setNavBar] = useAtom(navBarAtom);
  useEffect(() => {
    const persistentNavBar = localStorage.getItem(
      CURRENT_NAV_BAR_LOCAL_STORAGE
    );
    if (
      persistentNavBar &&
      Object.values(NavCategory).includes(
        persistentNavBar as NavCategoryValueType
      )
    ) {
      setNavBar(persistentNavBar as NavCategoryValueType);
    } else {
      setNavBar("Template");
    }
  }, []);
  useEffect(() => {
    const subscribe = onAuthStateChanged(auth, async (fbUser) => {
      if (!fbUser) {
        setAccessToken("");
        setFirebaseUser(null);
        return;
      }

      setFirebaseUser(fbUser);

      if (!fbUser.email) {
        return;
      }

      try {
        const { data } = await getUserByEmail(fbUser.email);

        if (data.error && data.error.code === 404) {
          setModalOpened(true);
          return;
        }
      } catch (e) {
        console.log(e);
        return;
      }

      try {
        const idToken = await fbUser.getIdToken();
        const response = await getAccessToken({ idToken });

        setAccessToken(response.data.data);
      } catch (e) {
        console.log(e);
      }
    });
    return () => {
      subscribe();
    };
  }, []);

  return (
    <>
      <Head>
        <title>Hire me</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <div className="h-12 bg-slate-50 flex justify-center items-center">
        <span>Create your resume</span>
      </div> */}

      <Header></Header>
      <Tabs
        classNames={{
          root: "bg-slate-50 ",
          tabLabel: "font-['Montserrat']",
          panel: "h-full",
          tabsList: "p-0",
        }}
        orientation="vertical"
        value={navBar}
        onTabChange={(value) => {
          if (value) {
            setNavBar(value as typeof NavCategory[keyof typeof NavCategory]);
          }
        }}
      >
        <SideBar isOpened={opened}></SideBar>
        <div className="overflow-y-auto w-full scrollbar-hide p-4">
          <Tabs.Panel value={NavCategory.TEMPLATE}>
            <TemplateContent setNavBar={setNavBar} />
          </Tabs.Panel>
          <Tabs.Panel value={NavCategory.PROFILE}>
            <ProfileContent setNavBar={setNavBar} />
          </Tabs.Panel>
          <Tabs.Panel value={NavCategory.EDUCATION}>
            <EducationContent setNavBar={setNavBar} />
          </Tabs.Panel>
          <Tabs.Panel value={NavCategory.WORK}>
            <WorkContent setNavBar={setNavBar} />
          </Tabs.Panel>
          <Tabs.Panel value={NavCategory.SKILLS}>
            <SkillContent setNavBar={setNavBar} />
          </Tabs.Panel>
          <Tabs.Panel value={NavCategory.PROJECTS}>
            <ProjectContent setNavBar={setNavBar} />
          </Tabs.Panel>
          <Tabs.Panel value={NavCategory.AWARDS}>
            <AwardContent setNavBar={setNavBar} />
          </Tabs.Panel>
        </div>
      </Tabs>

      <Modal
        opened={modalOpened}
        onClose={() => setModalOpened(false)}
        closeOnClickOutside={false}
        closeOnEscape={false}
        withCloseButton={false}
        centered
      >
        <div className="flex flex-col gap-4">
          <Text className="text-center">Look like we have a new user.</Text>
          <Text className="text-center">Tell us what you're looking for!</Text>
          <div className="flex flex-col gap-4">
            <Button
              onClick={async () => {
                setModalOpened(false);
                if (!firebaseUser || !firebaseUser.email) {
                  return;
                }
                const user: Omit<User, "id"> = {
                  email: firebaseUser.email,
                  isRecruiter: false,
                };
                await createUser(user);
              }}
              color="teal"
            >
              I'm looking for a job
            </Button>
            <Button
              onClick={async () => {
                setModalOpened(false);
                if (!firebaseUser || !firebaseUser.email) {
                  return;
                }
                const user: Omit<User, "id"> = {
                  email: firebaseUser.email,
                  isRecruiter: true,
                };
                await createUser(user);
              }}
              color="indigo"
            >
              I'm looking for candidates
            </Button>
          </div>
        </div>
      </Modal>
    </>
  );
};

export default Home;
