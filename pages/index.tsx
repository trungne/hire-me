import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import {
  AppShell,
  Navbar,
  Header,
  Aside,
  Text,
  MediaQuery,
  Burger,
  useMantineTheme,
  Tabs,
} from "@mantine/core";

import {
  getAuth,
  signInWithPopup,
  GoogleAuthProvider,
  onAuthStateChanged,
  signOut,
} from "firebase/auth";
import SideBar from "components/SideBar";
import Footer from "components/Footer";
import { useAtom } from "jotai";
import { writeIdTokenAtom } from "shared/atoms";
import { useQuery } from "react-query";
import { getCVs } from "shared/queries";

const auth = getAuth();
const provider = new GoogleAuthProvider();
const Home: NextPage = () => {
  const theme = useMantineTheme();
  const [opened, setOpened] = useState(false);
  const [_, setIdToken] = useAtom(writeIdTokenAtom);
  const { data, isLoading } = useQuery("CVs", getCVs);

  useEffect(() => {
    const subscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        // User is signed in, see docs for a list of available properties
        // https://firebase.google.com/docs/reference/js/firebase.User
        setIdToken(await user.getIdToken());
        // ...
      } else {
        // User is signed out
        // ...
        setIdToken("");
      }
    });
    return () => {
      subscribe();
    };
  }, []);
  return (
    <>
      <Head>
        <title>Hire me</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AppShell
        styles={{
          main: {
            background:
              theme.colorScheme === "dark"
                ? theme.colors.dark[8]
                : theme.colors.gray[0],
          },
        }}
        navbarOffsetBreakpoint="sm"
        asideOffsetBreakpoint="sm"
        navbar={<SideBar isOpened={opened} />}
        // aside={
        //   <MediaQuery smallerThan="sm" styles={{ display: "none" }}>
        //     <Aside p="md" hiddenBreakpoint="sm" width={{ sm: 200, lg: 300 }}>
        //       <Text>Application sidebar</Text>
        //     </Aside>
        //   </MediaQuery>
        // }
        footer={<Footer />}
        header={
          <Header height={{ base: 50, md: 70 }} p="md">
            <div
              style={{ display: "flex", alignItems: "center", height: "100%" }}
            >
              <MediaQuery largerThan="sm" styles={{ display: "none" }}>
                <Burger
                  opened={opened}
                  onClick={() => setOpened((o) => !o)}
                  size="sm"
                  color={theme.colors.gray[6]}
                  mr="xl"
                />
              </MediaQuery>

              <Text>Application header</Text>
            </div>
          </Header>
        }
      >
        <>
          <div>{data}</div>
          <button
            onClick={async () => {
              try {
                await signOut(auth);
              } catch (e) {}
            }}
          >
            Log out
          </button>
          <button
            onClick={async () => {
              try {
                const result = await signInWithPopup(auth, provider);
                const credential =
                  GoogleAuthProvider.credentialFromResult(result);
                // const token = credential?.accessToken;
                // const user = result.user;
                // const idToken = await user.getIdToken();
                // setIdToken(idToken);
              } catch (error: any) {
                // Handle Errors here.
                const errorCode = error.code;
                const errorMessage = error.message;
                // The email of the user's account used.
                const email = error.customData.email;
                // The AuthCredential type that was used.
                const credential =
                  GoogleAuthProvider.credentialFromError(error);
                // ...
              }
            }}
          >
            Login
          </button>
        </>
      </AppShell>
    </>
  );
};

export default Home;
