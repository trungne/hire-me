import type { NextPage } from "next";
import Head from "next/head";
import { useAtom } from "jotai";
import { useEffect, useState } from "react";
import { useMantineTheme, Tabs } from "@mantine/core";
import { getAuth, onAuthStateChanged } from "firebase/auth";
import SideBar from "components/SideBar";
import { navBarAtom, writeIdTokenAtom } from "shared/atoms";
import { NavCategory, NavCategoryValueType } from "shared/types";
import { CURRENT_NAV_BAR_LOCAL_STORAGE } from "shared/constants";
import {
  TemplateContent,
  ProfileContent,
  EducationContent,
  WorkContent,
  SkillContent,
  ProjectContent,
  AwardContent,
} from "components/TabContent";
import { Header } from "components/Header";

const auth = getAuth();
const Home: NextPage = () => {
  const theme = useMantineTheme();
  const [opened, setOpened] = useState(false);
  const [_, setIdToken] = useAtom(writeIdTokenAtom);
  // const { data, isLoading } = useQuery("CVs", getCVs);

  const [navBar, setNavBar] = useAtom(navBarAtom);
  useEffect(() => {
    const persistentNavBar = localStorage.getItem(
      CURRENT_NAV_BAR_LOCAL_STORAGE
    );
    if (
      persistentNavBar &&
      Object.values(NavCategory).includes(
        persistentNavBar as NavCategoryValueType
      )
    ) {
      setNavBar(persistentNavBar as NavCategoryValueType);
    } else {
      setNavBar("Template");
    }
  }, []);
  useEffect(() => {
    const subscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        // User is signed in, see docs for a list of available properties
        // https://firebase.google.com/docs/reference/js/firebase.User
        setIdToken(await user.getIdToken());
        // ...
      } else {
        // User is signed out
        // ...
        setIdToken("");
      }
    });
    return () => {
      subscribe();
    };
  }, []);

  return (
    <>
      <Head>
        <title>Hire me</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <div className="h-12 bg-slate-50 flex justify-center items-center">
        <span>Create your resume</span>
      </div> */}
      
      <Header></Header>
      <Tabs
        classNames={{
          root: "bg-slate-50 ",
          tabLabel: "font-['Montserrat']",
          panel: "h-full",
          'tabsList': "p-0"
        }}
        orientation="vertical"
        value={navBar}
        onTabChange={(value) => {
          if (value) {
            setNavBar(value as typeof NavCategory[keyof typeof NavCategory]);
          }
        }}
      >
        <SideBar isOpened={opened}></SideBar>
        <div className="overflow-y-auto w-full scrollbar-hide p-4">
          <Tabs.Panel value={NavCategory.TEMPLATE}>
            <TemplateContent setNavBar={setNavBar} />
          </Tabs.Panel>
          <Tabs.Panel value={NavCategory.PROFILE}>
            <ProfileContent setNavBar={setNavBar} />
          </Tabs.Panel>
          <Tabs.Panel value={NavCategory.EDUCATION}>
            <EducationContent setNavBar={setNavBar} />
          </Tabs.Panel>
          <Tabs.Panel value={NavCategory.WORK}>
            <WorkContent setNavBar={setNavBar} />
          </Tabs.Panel>
          <Tabs.Panel value={NavCategory.SKILLS}>
            <SkillContent setNavBar={setNavBar} />
          </Tabs.Panel>
          <Tabs.Panel value={NavCategory.PROJECTS}>
            <ProjectContent setNavBar={setNavBar} />
          </Tabs.Panel>
          <Tabs.Panel value={NavCategory.AWARDS}>
            <AwardContent setNavBar={setNavBar} />
          </Tabs.Panel>
        </div>
        {/* <AppShell
          styles={{
            main: {
              background:
                theme.colorScheme === "dark"
                  ? theme.colors.dark[8]
                  : theme.colors.gray[0],
            },
          }}
          navbarOffsetBreakpoint="sm"
          asideOffsetBreakpoint="sm"
          navbar={<SideBar isOpened={opened} />}
          // footer={<Footer />}
          header={
            <Header height={{ base: 50, md: 70 }} p="md">
              <div
                style={{
                  display: "flex",
                  alignItems: "center",
                  height: "100%",
                }}
              >
                <MediaQuery largerThan="sm" styles={{ display: "none" }}>
                  <Burger
                    opened={opened}
                    onClick={() => setOpened((o) => !o)}
                    size="sm"
                    color={theme.colors.gray[6]}
                    mr="xl"
                  />
                </MediaQuery>

                <Text>Application header</Text>
              </div>
            </Header>
          }
        > */}

        {/* </AppShell> */}
      </Tabs>
    </>
  );
};

export default Home;
